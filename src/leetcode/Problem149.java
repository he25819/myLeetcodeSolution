package leetcode;

import java.util.*;

/**
 * @author hexw
 * @version 1.0
 * @create 2020-10-27 11:35
 **/
public class Problem149 {
    public static void main(String[] args) {
//        System.out.println(new Problem149().maxPoints(new int[][]{{0, 0}, {1, 65536}, {65536, 0}}));
        System.out.println(new Problem149().maxPoints2(new int[][]{{0, 0}, {1, 1}, {0, 0}}));
//        System.out.println(new Problem149().maxPoints(new int[][]{{1, 1}, {1, 1}, {1, 1}}));
//        System.out.println(new Problem149().maxPoints(new int[][]{{0, -1}, {0, 3}, {0, -4}, {0, -2}, {0, -4}, {0, 0}, {0, 0}, {0, 1}, {0, -2}, {0, 4}}));
//        System.out.println(new Problem149().maxPoints2(new int[][]{{-240,-657},{-27,-188},{-616,-247},{-264,-311},{-352,-393},{-270,-748},{3,4},{-308,-87},{150,526},{0,-13},{-7,-40},{-3,-10},{-531,-892},{-88,-147},{4,-3},{-873,-555},{-582,-360},{-539,-207},{-118,-206},{970,680},{-231,-47},{352,263},{510,143},{295,480},{-590,-990},{-236,-402},{308,233},{-60,-111},{462,313},{-270,-748},{-352,-393},{-35,-148},{-7,-40},{440,345},{388,290},{270,890},{10,-7},{60,253},{-531,-892},{388,290},{-388,-230},{340,85},{0,-13},{770,473},{0,73},{873,615},{-42,-175},{-6,-8},{49,176},{308,222},{170,27},{-485,-295},{170,27},{510,143},{-18,-156},{-63,-316},{-28,-121},{396,304},{472,774},{-14,-67},{-5,7},{-485,-295},{118,186},{-154,-7},{-7,-40},{-97,-35},{4,-9},{-18,-156},{0,-31},{-9,-124},{-300,-839},{-308,-352},{-425,-176},{-194,-100},{873,615},{413,676},{-90,-202},{220,140},{77,113},{-236,-402},{-9,-124},{63,230},{-255,-118},{472,774},{-56,-229},{90,228},{3,-8},{81,196},{970,680},{485,355},{-354,-598},{-385,-127},{-2,7},{531,872},{-680,-263},{-21,-94},{-118,-206},{616,393},{291,225},{-240,-657},{-5,-4},{1,-2},{485,355},{231,193},{-88,-147},{-291,-165},{-176,-229},{154,153},{-970,-620},{-77,33},{-60,-111},{30,162},{-18,-156},{425,114},{-177,-304},{-21,-94},{-10,9},{-352,-393},{154,153},{-220,-270},{44,-24},{-291,-165},{0,-31},{240,799},{-5,-9},{-70,-283},{-176,-229},{3,8},{-679,-425},{-385,-127},{396,304},{-308,-352},{-595,-234},{42,149},{-220,-270},{385,273},{-308,-87},{-54,-284},{680,201},{-154,-7},{-440,-475},{-531,-892},{-42,-175},{770,473},{118,186},{-385,-127},{154,153},{56,203},{-616,-247}}));
    }

    /* test cases
    [[1,1],[2,2],[3,3]]
[[1,1],[2,1],[3,1]]
[]
[[]]
[[1,1]]
[[1,1],[2,2],[3,3],[2,1],[3,1],[4,1],[5,1]]
[[1,1],[2,2],[3,3],[2,1],[3,1],[4,1],[5,1],[6,6],[7,7],[8,8],[9,9],[100,100]]
[[0,0],[1,1],[0,0]]
[[0,0],[1,1],[1,-1]]
[[0,0],[1,65536],[65536,0]]
[[-230,324],[-291,141],[34,-2],[80,22],[-28,-134],[40,-23],[-72,-149],[0,-17],[32,-32],[-207,288],[7,32],[-5,0],[-161,216],[-48,-122],[-3,39],[-40,-113],[115,-216],[-112,-464],[-72,-149],[-32,-104],[12,42],[-22,19],[-6,-21],[-48,-122],[161,-288],[16,11],[39,23],[39,30],[873,-111]]
[[1,1],[1,1],[1,1]]
[[0,-1],[0,3],[0,-4],[0,-2],[0,-4],[0,0],[0,0],[0,1],[0,-2],[0,4]]
[[-240,-657],[-27,-188],[-616,-247],[-264,-311],[-352,-393],[-270,-748],[3,4],[-308,-87],[150,526],[0,-13],[-7,-40],[-3,-10],[-531,-892],[-88,-147],[4,-3],[-873,-555],[-582,-360],[-539,-207],[-118,-206],[970,680],[-231,-47],[352,263],[510,143],[295,480],[-590,-990],[-236,-402],[308,233],[-60,-111],[462,313],[-270,-748],[-352,-393],[-35,-148],[-7,-40],[440,345],[388,290],[270,890],[10,-7],[60,253],[-531,-892],[388,290],[-388,-230],[340,85],[0,-13],[770,473],[0,73],[873,615],[-42,-175],[-6,-8],[49,176],[308,222],[170,27],[-485,-295],[170,27],[510,143],[-18,-156],[-63,-316],[-28,-121],[396,304],[472,774],[-14,-67],[-5,7],[-485,-295],[118,186],[-154,-7],[-7,-40],[-97,-35],[4,-9],[-18,-156],[0,-31],[-9,-124],[-300,-839],[-308,-352],[-425,-176],[-194,-100],[873,615],[413,676],[-90,-202],[220,140],[77,113],[-236,-402],[-9,-124],[63,230],[-255,-118],[472,774],[-56,-229],[90,228],[3,-8],[81,196],[970,680],[485,355],[-354,-598],[-385,-127],[-2,7],[531,872],[-680,-263],[-21,-94],[-118,-206],[616,393],[291,225],[-240,-657],[-5,-4],[1,-2],[485,355],[231,193],[-88,-147],[-291,-165],[-176,-229],[154,153],[-970,-620],[-77,33],[-60,-111],[30,162],[-18,-156],[425,114],[-177,-304],[-21,-94],[-10,9],[-352,-393],[154,153],[-220,-270],[44,-24],[-291,-165],[0,-31],[240,799],[-5,-9],[-70,-283],[-176,-229],[3,8],[-679,-425],[-385,-127],[396,304],[-308,-352],[-595,-234],[42,149],[-220,-270],[385,273],[-308,-87],[-54,-284],[680,201],[-154,-7],[-440,-475],[-531,-892],[-42,-175],[770,473],[118,186],[-385,-127],[154,153],[56,203],[-616,-247]]
[[0,0],[94911151,94911150],[94911152,94911151]]

     */

    // Wrong Answer！
    public int maxPoints(int[][] points) {
        if (points == null || points.length == 0)
            return 0;
        if (points.length <= 2)
            return points.length;

        Arrays.sort(points, (o1, o2) -> o1[0] - o2[0] != 0 ? o1[0] - o2[0] : o1[1] - o2[1]);
//        boolean[][] calculated = new boolean[points.length][points.length];
        int max = 2;
        for (int i = 0; i < points.length - 2; i++) {
            int count = 2;
            boolean diffPoint = true;
            for (int j = i + 1; j < points.length - 1; j++) {
//                if (calculated[i][j])
//                    continue;
                max = Math.max(max, count);
                int height = points[j][1] - points[i][1];
                int width = (points[j][0] - points[i][0]);
                if (height == 0 && width == 0) {
                    count++;
                    diffPoint = false;
                    continue;
                }
                if (diffPoint)
                    count = 2;
                diffPoint = true;
                for (int k = j + 1; k < points.length; k++) {
                    if (Math.abs((double) (points[k][1] - points[j][1]) * width - (double) (points[k][0] - points[j][0]) * height) < 0.1) {
                        max = Math.max(max, ++count);
//                        calculated[j][k] = true;
                    }
                }
            }
        }
        return max;
    }



    // 一直没有AC，无奈网上查找别人的解法
    // 参考 https://leetcode-cn.com/problems/max-points-on-a-line/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by--35/ 的解法三
    // 大概思路：对每一点循环其他点，所形成的直线的斜率，同样的斜率最多的就是解。
    // Runtime: 21 ms, faster than 51.33% of Java online submissions for Max Points on a Line.
    //Memory Usage: 39.2 MB, less than 5.68% of Java online submissions for Max Points on a Line.
    public int maxPoints2(int[][] points) {
        if (points == null || points.length == 0)
            return 0;
        if (points.length <= 2)
            return points.length;

        int rst = 2;
        for (int i = 0; i < points.length - 1; i++) {
            int duplicate = 0;
            int max = 0;
            Map<String, Integer> map = new HashMap<>();
            for (int j = i + 1; j < points.length; j++) {
                int height = points[j][1] - points[i][1];
                int width = points[j][0] - points[i][0];
                if (width == 0 && height == 0) {
                    duplicate++;
                    continue;
                }
                int gcd = gcd(width, height);
                height /= gcd;
                width /= gcd;

                String key = height + "/" + width;
                int n = map.getOrDefault(key, 0);
                map.put(key, n + 1);
                max = Math.max(max, n + 1);
            }
            rst = Math.max(rst, max + duplicate + 1);
        }

        return rst;
    }

    /**
     * 最大公约数
     */
    private int gcd(int a, int b) {
        while (b != 0) {
            int tmp = a % b;
            a = b;
            b = tmp;
        }
        return a;
    }
}
